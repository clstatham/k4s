%alloc9
@alloc9_elem0 "Hello I'm a STATIC_ARRAY"

%rust_begin_unwind
    push q bp
    push q ra
    mov q bp sp
    sub q sp $360
; [-360+bp] <= rg
    mov q [-360+bp] rg
    mov q ra %rust_begin_unwind
%rust_begin_unwindstart
    mov q ra %rust_begin_unwindstart
    jmp q %rust_begin_unwindbb1
%rust_begin_unwindbb1
    mov q ra %rust_begin_unwindbb1
    jmp q %rust_begin_unwindbb1
    mov q sp bp
    pop q ra
    pop q bp
    ret

@null_data_2 $0
%printstr
    push q bp
    push q ra
    push q rb
    mov q bp sp
    sub q sp $136
; [-24+bp] <= rg
    mov q [-24+bp] rg
; [-40+bp] <= rh
    mov q [-40+bp] rh
    mov q ra %printstr
%printstrstart
; %0 = getelementptr inbounds i8* %s, i64 %len
    mov q [-56+bp] [-24+bp]
    mov q rb [-40+bp]
    mul q rb $1
    add q [-56+bp] rb
    mov q rb [-56+bp]
    mov b [-8+bp] [rb]
; %1 = icmp ne i8* %s, i8* null
    cmp q [-24+bp] @null_data_2
    jne q %printstr__3_cmp_true4
    jmp q %printstr__3_cmp_false4
%printstr__3_cmp_true4
    mov b [-64+bp] $1
    jmp q %printstr__3_cmp_end4
%printstr__3_cmp_false4
    mov b [-64+bp] rz
%printstr__3_cmp_end4
; tail call @llvm.assume(i1 %1)
    mov b rg [-64+bp]
    call q %llvm.assume
; %_12.i7 = icmp eq i64 %len, i64 0
    cmp q [-40+bp] rz
    jeq q %printstr__5_cmp_true6
    jmp q %printstr__5_cmp_false6
%printstr__5_cmp_true6
    mov b [-72+bp] $1
    jmp q %printstr__5_cmp_end6
%printstr__5_cmp_false6
    mov b [-72+bp] rz
%printstr__5_cmp_end6
    mov q ra %printstrstart
    cmp b [-72+bp] rz
    jeq q %printstrbb7
    jmp q %printstrbb5
%printstrbb5
; tail call @printc_(i8 10)
    mov b rg $10
    call q %printc_
    mov q ra %printstrbb5
    jmp q %printstr_ret
%printstrbb7
; %iter.sroa.0.08 = phi i8* [ i8* %2, %bb7 ], [ i8* %s, %start ]
    cmp q ra %printstrbb7
    jeq q %printstr__7_phi_%printstrbb7
    cmp q ra %printstrstart
    jeq q %printstr__7_phi_%printstrstart
    und
%printstr__7_phi_%printstrbb7
    mov q [-96+bp] [-120+bp]
    jmp q %printstr__7_phi_end
%printstr__7_phi_%printstrstart
    mov q [-96+bp] [-24+bp]
    jmp q %printstr__7_phi_end
%printstr__7_phi_end
; %2 = getelementptr inbounds i8* %iter.sroa.0.08, i64 1
    mov q [-120+bp] [-96+bp]
    mov q rb $1
    mul q rb $1
    add q [-120+bp] rb
    mov q rb [-120+bp]
    mov b [-104+bp] [rb]
; %_18 = load i8* %iter.sroa.0.08, align 1
    mov q rb [-96+bp]
    mov b [-128+bp] [rb]
; tail call @printc_(i8 %_18)
    mov b rg [-128+bp]
    call q %printc_
; %_12.i = icmp eq i8* %2, i8* %0
    cmp q [-120+bp] [-56+bp]
    jeq q %printstr__8_cmp_true9
    jmp q %printstr__8_cmp_false9
%printstr__8_cmp_true9
    mov b [-136+bp] $1
    jmp q %printstr__8_cmp_end9
%printstr__8_cmp_false9
    mov b [-136+bp] rz
%printstr__8_cmp_end9
    mov q ra %printstrbb7
    cmp b [-136+bp] rz
    jeq q %printstrbb7
    jmp q %printstrbb5
%printstr_ret
    mov q sp bp
    pop q rb
    pop q ra
    pop q bp
    ret

%add
    push q bp
    push q ra
    mov q bp sp
    sub q sp $64
; [-16+bp] <= rg
    mov q [-16+bp] rg
; [-32+bp] <= rh
    mov q [-32+bp] rh
    mov q ra %add
%addstart
; tail call @printstr(getelementptr inbounds (<{ [24 x i8] }>* @alloc9, i64 0, i32 0, i64 0), i64 24)
    mov q [-48+bp] %alloc9
    mov q rg [-48+bp]
    mov q rh $24
    call q %printstr
; %0 = add i64 %right, i64 %left
    mov q [-64+bp] [-32+bp]
    add q [-64+bp] [-16+bp]
    mov q ra %addstart
    jmp q %add_ret
%add_ret
    mov q ra [-64+bp]
    mov q sp bp
    pop q ra
    pop q bp
    ret


